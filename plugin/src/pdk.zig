// THIS FILE WAS GENERATED BY `xtp-zig-bindgen`. DO NOT EDIT.
const std = @import("std");
const extism = @import("extism-pdk");

const user = @import("main.zig");
const schema = @import("schema.zig");

const _plugin = extism.Plugin.init(std.heap.wasm_allocator);

const ERR_PRINTING_MSG: []const u8 = "std.fmt.allocPrint failed when formatting plugin error";

export fn handleLogEvent() i32 {
    // Get the input data
    // in JSON
    const jsonInput = _plugin.getJsonOpt(schema.LogRequest, .{}) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };
    defer jsonInput.deinit();

    const input = jsonInput.value();

    // Call the implementation function
    const output = user.handleLogEvent(input) catch |err| {
        const msg = std.fmt.allocPrint(_plugin.allocator, "{}", .{err}) catch ERR_PRINTING_MSG;
        _plugin.setError(msg);
        return -1;
    };

    _plugin.output(output);
    return 0;
}
